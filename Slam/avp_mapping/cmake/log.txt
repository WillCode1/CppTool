diff --git a/CMakeLists.txt b/CMakeLists.txt
index f9854ef..d205312 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -39,7 +39,7 @@ set(CMAKE_CXX_FLAGS_RELEASE "-O2")
 # Driveworks SDK
 #-------------------------------------------------------------------------------
 
-if(NOT QNX)
+if(VIBRANTE_V4L)
    add_definitions(-DDRIVEWORKS)
    find_package(Driveworks REQUIRED)
    include_directories(${Driveworks_INCLUDE_DIR})
@@ -75,7 +75,7 @@ add_subdirectory(src/percept_handler)
 add_subdirectory(src/fisheye)
 add_subdirectory(src/fisheye/fisheye_pose_receiver)
 add_subdirectory(src/display)
-if(NOT QNX)
+if(VIBRANTE_V4L)
   add_subdirectory(src/dw_common)
   add_subdirectory(src/raw2bmp)
   add_subdirectory(src/dw_camera)
diff --git a/build_px2.sh b/build_px2.sh
index 11394fa..f058a79 100755
--- a/build_px2.sh
+++ b/build_px2.sh
@@ -1,2 +1,2 @@
 #!/bin/bash
-mkdir -p build_px2;cd build_px2; cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_TOOLCHAIN_FILE=../cmake/Toolchain-V4L.cmake -DVIBRANTE_PDK:STRING=/work/VibranteSDK/vibrante-t186ref-linux ../;make -j
+mkdir -p build_px2;cd build_px2; cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_TOOLCHAIN_FILE=../cmake/Toolchain-V5L.cmake -DVIBRANTE_PDK:STRING=/work/VibranteSDK/drive-t186ref-linux ../;make -j
diff --git a/cmake/ArchConfiguration.cmake b/cmake/ArchConfiguration.cmake
index 23d7f34..b5419f4 100644
--- a/cmake/ArchConfiguration.cmake
+++ b/cmake/ArchConfiguration.cmake
@@ -49,7 +49,7 @@ else()
     if(VIBRANTE)
         # Select device architecture
         if(CMAKE_SIZEOF_VOID_P EQUAL 8)
-	    if(QNX)
+            if(VIBRANTE_V5Q)
                 set(ARCH_DIR "qnx-aarch64")
             else()
                 set(ARCH_DIR "linux-aarch64")
@@ -60,6 +60,7 @@ else()
     else()
         set(ARCH_DIR "linux")
     endif()
+
 endif()
 unset(SDK_ARCH_DIR CACHE)
 set(SDK_ARCH_DIR ${ARCH_DIR} CACHE INTERNAL "")
diff --git a/cmake/CMakeParseArguments.cmake b/cmake/CMakeParseArguments.cmake
index 8553f38..4c41c1b 100644
--- a/cmake/CMakeParseArguments.cmake
+++ b/cmake/CMakeParseArguments.cmake
@@ -81,7 +81,7 @@
 # interpreted as the beginning of the new option.  E.g.
 # my_install(TARGETS foo DESTINATION OPTIONAL) would result in
 # MY_INSTALL_DESTINATION set to "OPTIONAL", but MY_INSTALL_DESTINATION
-# would be empty and MY_INSTALL_OPTIONAL would be set to TRUE therefor.
+# would be empty and MY_INSTALL_OPTIONAL would be set to TRUE therefore.
 
 #=============================================================================
 # Copyright 2010 Alexander Neundorf <neundorf@kde.org>
diff --git a/cmake/CommonConfiguration.cmake b/cmake/CommonConfiguration.cmake
index 4f83a34..95876e4 100644
--- a/cmake/CommonConfiguration.cmake
+++ b/cmake/CommonConfiguration.cmake
@@ -3,9 +3,10 @@
 #-------------------------------------------------------------------------------
 # Debug symbols
 #-------------------------------------------------------------------------------
-# Force debug symbols on experimental builds to have stack trace
+# Enable minimal (level 1) debug info on experimental builds for
+# informative stack trace including function names
 if(SDK_BUILD_EXPERIMENTAL AND NOT CMAKE_BUILD_TYPE MATCHES Debug)
-    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -g")
+    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -g1")
 endif()
 
 #-------------------------------------------------------------------------------
@@ -33,26 +34,10 @@ endif()
 #-------------------------------------------------------------------------------
 find_package(Threads REQUIRED)
 
-if(LINUX)
-    find_package(X11 REQUIRED)
-    if (NOT X11_Xrandr_FOUND)
-        message(FATAL_ERROR "Missing X11_Xrandr library")
-    endif()
-    if (NOT X11_Xcursor_FOUND)
-        message(FATAL_ERROR "Missing X11_Xcursor library")
-    endif()
-    if (NOT X11_xf86vmode_FOUND)
-        message(FATAL_ERROR "Missing X11_xf86vmode library")
-    endif()
-    if (NOT X11_Xinerama_FOUND)
-        message(FATAL_ERROR "Missing X11_Xinerama library")
-    endif()
-    if (NOT X11_Xi_FOUND)
-        message(FATAL_ERROR "Missing X11_Xi library")
-    endif()
-endif()
-
-#The flag -D_GLIBCXX_USE_CXX11_ABI=0 is for compatibility with gcc4.8 in ubuntu14.04, since CXX11_ABI is not supported on gcc4.8
-if(LINUX)
-    add_definitions(-D_GLIBCXX_USE_CXX11_ABI=0)
+#-------------------------------------------------------------------------------
+# Profiling
+#-------------------------------------------------------------------------------
+if (CMAKE_BUILD_TYPE MATCHES "Profile")
+    add_definitions(-DDW_PROFILING)
+    set(DW_PROFILING TRUE)
 endif()
diff --git a/cmake/Configuration.cmake b/cmake/Configuration.cmake
index 5bfc98a..7c3f96b 100644
--- a/cmake/Configuration.cmake
+++ b/cmake/Configuration.cmake
@@ -1,4 +1,4 @@
-# Copyright (c) 2016, NVIDIA CORPORATION.  All rights reserved.
+# Copyright (c) 2016-2017, NVIDIA CORPORATION.  All rights reserved.
 
 #-------------------------------------------------------------------------------
 # CUDA dependency (needs to be after defining all configurations)
diff --git a/cmake/FindCUDA.cmake b/cmake/FindCUDA.cmake
index cdaed18..6cf1af5 100644
--- a/cmake/FindCUDA.cmake
+++ b/cmake/FindCUDA.cmake
@@ -88,6 +88,11 @@
 #   -- Use pynvccache as cuda compilation cache if available and dependencies
 #      are fulfilled. Otherwise fall-back to regular non-cached cuda compilation.
 #
+#   CUDA_DETERMINE_HOST_GPU_CODE_FLAGS (Default ON)
+#   -- Determine GPU architecture of CUDAS GPUs in host system. Saved to
+#      variable CUDA_HOST_GPU_CODE_FLAGS (e.g., '--gpu-code=sm_30,sm_61') to be
+#      used in NVCC command line arguments.
+#
 #   CUDA_NON_PROPAGATED_HOST_FLAGS
 #   -- If CUDA_PROPAGATE_HOST_FLAGS is set to ON, a list of flags which
 #      will not be propagated. If CUDA_PROPAGATE_HOST_FLAGS is OFF, this
@@ -166,7 +171,7 @@
 #           CUDA_DEPENDENCY_DIRS
 #         They are used to create the custom commands to update dependencies. These
 #         variables have to be empty before the first time CUDA_WRAP_SRCS is called.
-#         The funciton CUDA_RESET_INTERNAL_CACHE() can be used to clear them.
+#         The function CUDA_RESET_INTERNAL_CACHE() can be used to clear them.
 #
 #   CUDA_RESET_INTERNAL_CACHE()
 #   -- Resets all internal cache variables. Should be called at the end of the main
@@ -236,7 +241,7 @@
 #      The arguments passed in after OPTIONS are extra command line options to
 #      give to nvcc.  You can also specify per configuration options by
 #      specifying the name of the configuration followed by the options.  General
-#      options must preceed configuration specific options.  Not all
+#      options must precede configuration specific options.  Not all
 #      configurations need to be specified, only the ones provided will be used.
 #
 #         OPTIONS -DFLAG=2 "-DFLAG_OTHER=space in flag"
@@ -524,6 +529,10 @@ if(EXISTS ${CMAKE_CURRENT_LIST_DIR}/pynvcccache)
   option(CUDA_USE_PYNVCCCACHE "Use pynvccache compiler cache" OFF)
 endif()
 
+if(EXISTS ${CMAKE_CURRENT_LIST_DIR}/FindCUDA/get_cuda_sm.sh)
+  option(CUDA_DETERMINE_HOST_GPU_CODE_FLAGS "Determine current real host GPU code nvcc flags" ON)
+endif()
+
 # Prevent some flags from being propagated
 set(CUDA_NON_PROPAGATED_HOST_FLAGS "" CACHE STRING "Flags which will not be automatically propagated to the host compiler.")
 
@@ -549,7 +558,7 @@ mark_as_advanced(
 # Makefile and similar generators don't define CMAKE_CONFIGURATION_TYPES, so we
 # need to add another entry for the CMAKE_BUILD_TYPE.  We also need to add the
 # standerd set of 4 build types (Debug, MinSizeRel, Release, and RelWithDebInfo)
-# for completeness.  We need run this loop in order to accomodate the addition
+# for completeness.  We need run this loop in order to accommodate the addition
 # of extra configuration types.  Duplicate entries will be removed by
 # REMOVE_DUPLICATES.
 set(CUDA_configuration_types ${CMAKE_CONFIGURATION_TYPES} ${CMAKE_BUILD_TYPE} Debug MinSizeRel Release RelWithDebInfo)
@@ -708,10 +717,10 @@ set(CUDA_VERSION_STRING "${CUDA_VERSION}")
 if(CUDA_VERSION VERSION_GREATER "5.0" AND CMAKE_CROSSCOMPILING)
   if(CMAKE_SYSTEM_PROCESSOR MATCHES "arm" AND EXISTS "${CUDA_TOOLKIT_ROOT_DIR}/targets/armv7-linux-gnueabihf")
     set(CUDA_TOOLKIT_TARGET_DIR "${CUDA_TOOLKIT_ROOT_DIR}/targets/armv7-linux-gnueabihf" CACHE PATH "Toolkit target location.")
-  elseif(CMAKE_SYSTEM_PROCESSOR MATCHES "aarch64" AND EXISTS "${CUDA_TOOLKIT_ROOT_DIR}/targets/aarch64-linux")
-    set(CUDA_TOOLKIT_TARGET_DIR "${CUDA_TOOLKIT_ROOT_DIR}/targets/aarch64-linux" CACHE PATH "Toolkit target location.")
-  elseif(CMAKE_SYSTEM_PROCESSOR MATCHES "aarch64" AND EXISTS "${CUDA_TOOLKIT_ROOT_DIR}/targets/aarch64-qnx")
+  elseif(CMAKE_SYSTEM_PROCESSOR MATCHES "aarch64" AND VIBRANTE_V5Q AND EXISTS "${CUDA_TOOLKIT_ROOT_DIR}/targets/aarch64-qnx")
     set(CUDA_TOOLKIT_TARGET_DIR "${CUDA_TOOLKIT_ROOT_DIR}/targets/aarch64-qnx" CACHE PATH "Toolkit target location.")
+  elseif(CMAKE_SYSTEM_PROCESSOR MATCHES "aarch64" AND VIBRANTE_V5L AND EXISTS "${CUDA_TOOLKIT_ROOT_DIR}/targets/aarch64-linux")
+    set(CUDA_TOOLKIT_TARGET_DIR "${CUDA_TOOLKIT_ROOT_DIR}/targets/aarch64-linux" CACHE PATH "Toolkit target location.")
   endif()
 else()
   set(CUDA_TOOLKIT_TARGET_DIR "${CUDA_TOOLKIT_ROOT_DIR}" CACHE PATH "Toolkit target location.")
@@ -746,6 +755,7 @@ mark_as_advanced(CUDA_TOOLKIT_INCLUDE)
 
 # Set the user list of include dir to nothing to initialize it.
 set (CUDA_NVCC_INCLUDE_ARGS_USER "")
+set (CUDA_NVCC_SYSTEM_INCLUDE_ARGS_USER "")
 set (CUDA_INCLUDE_DIRS ${CUDA_TOOLKIT_INCLUDE})
 
 # Find nvidia driver version
@@ -789,6 +799,8 @@ macro(cuda_find_library_local_first_with_path_ext _var _names _doc _path_ext )
     DOC ${_doc}
     HINTS ${VIBRANTE_PDK}/lib-target
           "/usr/lib/nvidia-${nvidia-driver-version}"
+          "/usr/lib/nvidia-396"
+          "/usr/lib/nvidia-390"
           "/usr/lib/nvidia-367"
           "/usr/lib/nvidia-364"
           "/usr/lib/nvidia-361"
@@ -1008,6 +1020,12 @@ macro(CUDA_INCLUDE_DIRECTORIES)
   endforeach()
 endmacro()
 
+macro(CUDA_SYSTEM_INCLUDE_DIRECTORIES)
+  foreach(dir ${ARGN})
+    list(APPEND CUDA_NVCC_SYSTEM_INCLUDE_ARGS_USER "${dir}")
+  endforeach()
+endmacro()
+
 
 ##############################################################################
 cuda_find_helper_file(parse_cubin cmake)
@@ -1240,6 +1258,10 @@ macro(CUDA_WRAP_SRCS cuda_target format generated_files)
     endforeach()
   endif()
 
+  foreach(dir ${CUDA_NVCC_SYSTEM_INCLUDE_ARGS_USER})
+    list(APPEND CUDA_NVCC_INCLUDE_ARGS -isystem ${dir})
+  endforeach()
+
   # Reset these variables
   set(CUDA_WRAP_OPTION_NVCC_FLAGS)
   foreach(config ${CUDA_configuration_types})
@@ -1318,6 +1340,13 @@ macro(CUDA_WRAP_SRCS cuda_target format generated_files)
       if(CUDA_NON_PROPAGATED_HOST_FLAGS)
         list(APPEND _cuda_non_propagated_host_flags ${CUDA_NON_PROPAGATED_HOST_FLAGS})
       endif()
+
+      if(VIBRANTE_V5Q)
+        list(APPEND _cuda_non_propagated_host_flags "-nostdinc++")
+        list(APPEND _cuda_non_propagated_host_flags "-nostdinc")
+        list(APPEND _cuda_non_propagated_host_flags "-isystem ${QNX_TARGET}/usr/include/c++/v1")
+      endif()
+
       foreach(flag ${_cuda_non_propagated_host_flags})
         string(REPLACE "${flag}" "" _cuda_host_flags "${_cuda_host_flags}")
       endforeach()
@@ -1939,3 +1968,23 @@ macro(CUDA_BUILD_CLEAN_TARGET)
   # have been removed.
   set(CUDA_ADDITIONAL_CLEAN_FILES "" CACHE INTERNAL "List of intermediate files that are part of the cuda dependency scanning.")
 endmacro()
+
+###############################################################################
+###############################################################################
+# CUDA LOCAL GPU ARCH DETERMINATION
+###############################################################################
+###############################################################################
+if(CUDA_DETERMINE_HOST_GPU_CODE_FLAGS)
+  if(NOT CUDA_HOST_GPU_CODE_FLAGS)
+    execute_process(COMMAND ${CMAKE_CURRENT_LIST_DIR}/FindCUDA/get_cuda_sm.sh
+                    RESULT_VARIABLE result
+                    OUTPUT_VARIABLE output)
+    if(NOT result)
+      string(STRIP ${output} output)
+      set(CUDA_HOST_GPU_CODE_FLAGS ${output} CACHE STRING "NVCC GPU code flags determined by host introspection")
+      message(STATUS "Determined CUDA_HOST_GPU_CODE_FLAGS ${CUDA_HOST_GPU_CODE_FLAGS}")
+    endif()
+  endif()
+else()
+  unset(CUDA_HOST_GPU_CODE_FLAGS CACHE) # make sure no previously cached results are used
+endif()
diff --git a/cmake/FindCUDA/run_nvcc_deps.cmake b/cmake/FindCUDA/run_nvcc_deps.cmake
index c278b47..6a95d79 100644
--- a/cmake/FindCUDA/run_nvcc_deps.cmake
+++ b/cmake/FindCUDA/run_nvcc_deps.cmake
@@ -157,7 +157,7 @@ if(CUDA_VERSION VERSION_LESS "3.0")
   # CMake policy 0007 NEW states that empty list elements are not
   # ignored.  I'm just setting it to avoid the warning that's printed.
   cmake_policy(SET CMP0007 NEW)
-  # Note that this will remove all occurances of -G.
+  # Note that this will remove all occurrences of -G.
   list(REMOVE_ITEM depends_CUDA_NVCC_FLAGS "-G")
   cmake_policy(POP)
 endif()
diff --git a/cmake/FindDriveworks.cmake b/cmake/FindDriveworks.cmake
index 508ca19..adc17a0 100644
--- a/cmake/FindDriveworks.cmake
+++ b/cmake/FindDriveworks.cmake
@@ -37,9 +37,9 @@ SET(CMAKE_FIND_ROOT_PATH ${CMAKE_FIND_ROOT_PATH} ${DRIVEWORKS_DIR})
 # Include dir
 find_path(Driveworks_INCLUDE_DIR
   NAMES dw/core/Version.h
-  HINTS ${DRIVEWORKS_DIR}/targets/${CMAKE_SYSTEM_PROCESSOR}-linux/include
-        ${Driveworks_PKGCONF_INCLUDE_DIRS}/../targets/${CMAKE_SYSTEM_PROCESSOR}-linux/include
-  PATHS ${CMAKE_CURRENT_SOURCE_DIR}/../targets/${CMAKE_SYSTEM_PROCESSOR}-linux/include
+  HINTS ${DRIVEWORKS_DIR}/targets/${CMAKE_SYSTEM_PROCESSOR}-${CMAKE_SYSTEM_NAME}/include
+        ${Driveworks_PKGCONF_INCLUDE_DIRS}/../targets/${CMAKE_SYSTEM_PROCESSOR}-${CMAKE_SYSTEM_NAME}/include
+  PATHS ${CMAKE_CURRENT_SOURCE_DIR}/../targets/${CMAKE_SYSTEM_PROCESSOR}-${CMAKE_SYSTEM_NAME}/include
         ${CMAKE_CURRENT_SOURCE_DIR}/../include
         ${DRIVEWORKS_DIR}/include
 )
@@ -47,9 +47,9 @@ find_path(Driveworks_INCLUDE_DIR
 # Finally the library itself
 find_library(Driveworks_LIBRARY
   NAMES driveworks
-  HINTS ${DRIVEWORKS_DIR}/targets/${CMAKE_SYSTEM_PROCESSOR}-linux/lib
-        ${Driveworks_PKGCONF_LIBRARY_DIRS}/../targets/${CMAKE_SYSTEM_PROCESSOR}-linux/lib
-  PATHS ${CMAKE_CURRENT_SOURCE_DIR}/../targets/${CMAKE_SYSTEM_PROCESSOR}-linux/lib
+  HINTS ${DRIVEWORKS_DIR}/targets/${CMAKE_SYSTEM_PROCESSOR}-${CMAKE_SYSTEM_NAME}/lib
+        ${Driveworks_PKGCONF_LIBRARY_DIRS}/../targets/${CMAKE_SYSTEM_PROCESSOR}-${CMAKE_SYSTEM_NAME}/lib
+  PATHS ${CMAKE_CURRENT_SOURCE_DIR}/../targets/${CMAKE_SYSTEM_PROCESSOR}-${CMAKE_SYSTEM_NAME}/lib
         ${CMAKE_CURRENT_SOURCE_DIR}/../lib
         ${DRIVEWORKS_DIR}/lib
 )
diff --git a/cmake/InstallConfiguration.cmake b/cmake/InstallConfiguration.cmake
index c82e67e..5c4fe75 100644
--- a/cmake/InstallConfiguration.cmake
+++ b/cmake/InstallConfiguration.cmake
@@ -7,15 +7,6 @@ set(SDK_SAMPLE_DESTINATION  "bin")
 set(SDK_LIBRARY_DESTINATION "lib")
 set(SDK_ARCHIVE_DESTINATION "lib")
 
-function(sdk_install_samples SAMPLES)
-    install(TARGETS ${SAMPLES}
-        COMPONENT samples
-        RUNTIME DESTINATION ${SDK_SAMPLE_DESTINATION}
-        LIBRARY DESTINATION ${SDK_LIBRARY_DESTINATION}
-        ARCHIVE DESTINATION ${SDK_ARCHIVE_DESTINATION}
-    )
-endfunction(sdk_install_samples)
-
 function(sdk_add_sample SAMPLES)
     install(TARGETS ${SAMPLES}
         COMPONENT samples
